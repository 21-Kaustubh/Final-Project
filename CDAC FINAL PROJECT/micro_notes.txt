PC 
SP Higher Address---> Lower Address = Stack Grows downwards
SP-> LIFO
 
0xFFFF
fffe

0x0000
Inst.
ISA
Flow of PC in case of Jump, Function Call
Use of Stack Pointer
Von-numen Architecture- Haward Architecture
RISC-CISC
FPGA/ASIC

8N1@115200

SoC 
<10% is for the Micoprocessor


Reset
1. Power On Reset
2. Brownout Reset   Min 3.3v 3.0v
3. Watchdog Reset
4. Thermal Reset


32bit Microcontroller Architecture-
2^32=4GB

4GB of Memory  X
4GB of Address Space Y

FLash: 256KB to 1MB

2^64=

Real Time OS (8KB)[Free RTOS] vs General Purpose OS (4GB)
1. Latencies are very minimal in RTOS
2. Time lines are very Strict, it must follow the deadlines [WCET, BCET]
3. Determnistic Behaviour

Advanced RISC Machine : ARM

A Application A8,A53,A15,A72  [ARM v7A]
R Real Time R4,R5			[ARM v7R]
M Microcontroller M0,M3,M4,M7 [ARM v7M] 

M3 vs M4 (FPU,DSP)

ISA : Thumb2 16bit & 32bit intructions

ARM is soft IP Licensing company it will not manufacture chip it self

Architecture-ARMv7M

LinkerScript (*.LD) contains memory map specification

MMU- Memory Management Unit (Virtual Memory/ Cache) = NA

MPU- Memory Protection Unit (User Access/ Kernal Access) = Avb.

Maskble Int. : Avoided
NonMaskable : Cannot be Avoided RESET

Interrupt: main()-> Prog. is running -> Interrupt Occurs -> (Stacking)Save the current context in stack , including the address of PC -> 
Fetch the Address of ISR -> Execute ISR -> (UNStacking)Restore the context -> Back to main().


Arm State: Contains 32 bit Instructions for More Performance Efficiency
Thumb State: Contains 16 bit Instructions for More Energy Efficiency

Why we use 16bit Instructions?
1. Backward Compatibility
2. High Code Density
3. Multiple 16bit Instruction can be executed in single CPU Cycle

AMBA: Advance Microcontroller Bus Architecture
APB: Advance Peripheral Bus (Slow Speep Peripherals [UART, I2C, SPI])
AHB: Advance High Performance Bus (High Speed Peripherals[USB , Ethernet], Memory, DMA, RAM)
AXI : Advance eXntensible Interface (Used to Connect Components of SoC) 
PPB: Private Peripheral Bus
* Internal PPB (for connecting Core to NVIC, SCB)
* External PPB (for Connecting Debug Interface)

SoC and Bus Architecture Video Link: https://www.youtube.com/watch?v=CjB3AiVq-T0
1. Lite AHB Bus is used
2. AHB Lite has Single Master
3. No Burst Support , no Lock System
4. SoC Processor+ Peripherals 
5. Mordern Day SoC Quad SPI is used

PC in 32bit Machine 
11111111 11111111 11111111 11111111
	FF		FF		FF		FF
	1		1		1		1		= 4Bytes
	
PC in 64bit Machine
11111111	11111111	11111111	11111111	11111111	11111111	11111111	11111111
	FF			FF			FF			FF			FF			FF			FF			FF
	1			1			1			1			1			1			1			1		= 8Bytes	

SRAM Uses:
1. Used to Store Entire Stack
2. Return Address from Function , Return Address from Interrupt
3. It Stores all Local/Global Variable data

Operation States
1. Thumb State (Default)
2. Debug State (Only Availible when Debugger is attached)

Operation Modes
1. Thread Mode : for executing Normal code
2. Handler Mode : for executing exception Handler

Thread Mode
a. Privledge Mode (When System Starts/ at Startup)
b. UnPrivledge Mode 

Programmer Model at Interrupt :
User Switches from Thread Mode to the Handler Mode
User Cannot switch from Thead Mode Unpriv. to Priv. Directly
Restriction: User Cannot Change Directly from Thread Mode Unprivledge to Thread Mode Privledge

Stack Pointer in Cortex M
1. Main Stack Pointer : Default for Handler Mode
2. Process Stack Pointer : Used when a Free RTOS is Ported in Microcontroller.

Cortex M33, M23 Trust Zone and Secured OS: https://www.youtube.com/watch?v=0LpCEwSfA0s&t=7s

Condition 1: without Control Register & Without MPU
  FLASH (rx)      : ORIGIN = 0x08000000, LENGTH = 1024K
  RAM (xrw)       : ORIGIN = 0x20000000, LENGTH = 128K
  MEMORY_B1 (rx)  : ORIGIN = 0x60000000, LENGTH = 0K
Condition 2: with Control Register in Action and Without MPU
	we have Privledge Mode (When System Starts/ at Startup) & UnPrivledge Thread Mode 
Condition 3: with Control Register in Action and With MPU
	Specific Task are alocated specific memory regions and if any voilation happens then Mem. Fault Occurs

Stack:
When Free RTOS:
User Space: Process Stack Pointer
Kernel Space : Main Stack Pointer

When Only Firmware code without RTOS:
Uses Main Stack Pointer only

Task1: 0x10002000 to 0x20003000 

Task Modelling in RTOS

CONTROL Register:
1. nPriv = Priv. or UnPriv.
2. SPSEL = Stack Pointer Select bit for selecting Main or Process Stack Pointer.

R0-R7 Low Register used by 16bit Operations
R8-R12 High Registers used by 32bit Operations

R13-Stack Pointer
R14-Link Register
R15-Program Counter

PSR- Program Status Register
1. APSR  Application Program Status Register , Contains ALU Flags
2. EPSR Execution Program Status Register, Contains T Bit always set to High
3. IPSR Interrupt Program Status Register, Contains Interrupt Number


Char Data Type 1 Byte, or 8 Bits , Max Val in Decimal=255  (Unsigned Char)
Signed Char -128 to +127

Mask  Registers
1. PriMask Disables all Positive Priority Interrupt
2. FaultMask Disables all Positive Priority Interrupt and Hard Fault 
3. BasePri Disables all Interrupt below a certian level of Priority
MOV R0, #0x01
MSR PriMask,R0


To Disable all interrupts below 6 level
MOV R0, #0x06
MSR BasePri,R0

Interrupts are one type of Exception

Interrupt Service Routine or Handler

Hard Fault handler is a Default handler for System Exception

MSP Value is set by the First Entry of the Vector Table, 
as the Vector Table only contains addresses so the first entry will set the address for MSP.

SVC 
#Case1(Without OS) :Allowing the UnPrivledge Application getting the Privledge Access.
#Case2 (With OS) :Allow Initialization of OS and the PSP

PendSV
#Case1(Without OS) : Helps processing Interrupts in two halves [1. Top Half Processing (High Priority) ,2. Bottom Half Processing (Low Priority)]
#Case2 (With OS) : The PendSV exception can delaying the context-switching request until all other IRQ handlers have completed their processing.
 

Reset Flow
Init Main SP at address 0x00 -> Reset Vector(Pointing to an Address of Reset Handler) at address 0x04 -> Reset Handler (Init. Hardware like memory Sections Data and Code)-> main()

With Bootloader
Init Main SP at address 0x00 -> Reset Vector(Pointing to an Address of Reset Handler) at address 0x04 -> Reset Handler (Init. Hardware like memory Sections Data and Code)-> Bootloader (used for Flashing via Uart or OTA Update) --> main()

Peripherals

1. GPIO
2. Timer
3. UART (Serial)
4. SPI
5. I2C
6. CAN Bus

Async. : Uses Start bit , Stop Bit for  sync
Sync   : Uses Common Clock for Sync.

DMA : Direct Memory Access
Peripheral Directly store the Data to Memory Rather than going through CPU

Uart
Baud Rate:Full-duplex asynchronous communications up to 115200 bps
Data word length: 8 bits
Number of stop bits: 1 stop bit
Parity control(Parity check of received data frame): No Parity

8N1@115200

BitBanding:Concept of Addressing a Bit
Feature Availible in Two Regions in Memory Map: 1. SRAM 2. Peripheral
#Bit Region or Bit Banding Region: Here every bit is addressed and mapped to a word in word Region/Alias region

Word Address	0x20000000
Byte Address	[0x00000003	0x00000002	0x00000001	0x00000000]
Binary Value	{0b0T00P000	0b00S000W0	0b  Y  0  0  0  X  0  0  0	0b  0  Z  0  0  0  1  0  0}
										   [7][6][5][4][3][2][1][0]	   [7][6][5][4][3][2][1][0]


#Word Region or BitBanding Alias region : Here every address is a word ,so that PC runs smoothly, is linked to a bit in Bit Region

LDR R16,0x22000002C
MOV R1,0x01
STR #R16,R1

bit[00] Word:0x220000000 [0]					 bit[16] Word:0x220000040 [0]
bit[01] Word:0x220000004 [0]                     bit[17] Word:0x220000044 [0]  W
bit[02] Word:0x220000008 [0] 1                   bit[18] Word:0x220000048 [0]
bit[03] Word:0x22000000C [0]                     bit[19] Word:0x22000004C [0]
bit[04] Word:0x220000010 [0]                     bit[20] Word:0x220000050 [0]
bit[05] Word:0x220000014 [0]                     bit[21] Word:0x220000054 [0]	 S
bit[06] Word:0x220000018 [0]                     bit[22] Word:0x220000058 [0]
bit[07] Word:0x22000001C [0]                     bit[23] Word:0x22000005C [0]
                                
bit[08] Word:0x220000020 [0]                     0x220000060 [24]
bit[09] Word:0x220000024 [0]                     0x220000064 [25]
bit[10] Word:0x220000028 [0] 1|0                 0x220000068 [26]
bit[11] Word:0x22000002C [0] X                   0x22000006C [27] P
bit[12] Word:0x220000030 [0]                     0x220000070 [28]
bit[13] Word:0x220000034 [0]                     0x220000074 [29]
bit[14] Word:0x220000038 [0]                     0x220000078 [30] T
bit[15] Word:0x22000003C [0] Y                   0x22000007C [31]

Word Address	0x20000004
Byte Address	[0x00000007	0x00000006	0x00000005	0x00000004]
Binary Value	{0b00000000	0b00000000	0b00000000	0b00000000}

Word Address	0x20000008
Byte Address	[0x00000008	0x00000009	0x0000000A	0x0000000B]
Binary Value	{0b00000000	0b00000000	0b00000000	0b00000000}

Word Address	0x2000000C
Byte Address	[0x0000000C	0x0000000D	0x0000000E	0x0000000F]
Binary Value	{0b00000000	0b00000000	0b00000000	0b00000000}





If we want to set the value of 28th bit of the address 0x200000000, given the base address of 
alias Region 0x220000000, Which word will coressrespond to the above 28th bit?

Answer 220000070

Interrupt States

1. Enabled or Disabled
2. Pending(ISR is not started Yet, it can be due to Stacking Operation or 
alredy an high priority interrup will be active ) or Not-Pending
3. Active(ISR is being served)  or Inactive

Interrupt can be Processed if:

1. Pending state is set
2. Its Enabled
3. Its higher Priority than current Level

Assuming we are in RTOS Envt. with Multiple Thread

Thread 1 is running and executing instruction 0x1000
Thread 1 Calls Function Located at 0x2000
At this point LR=0x1004
and PC has moved to some instruction in function having address 0x2008

Now Context Switch occurs and
Thread 2 is running now , at this point you need to store Both
PC =0x2008
LR =0x1004
so that after you switch back to Thread 1 you can jump back to earlier function.

Vector Table Relocation
Question: I've written a bootloader application for STM microcontroller. 
Following are the things I did to do the same: 
1. Created a bootloader application in Flash addresses 0x0000 to 0x8000 
2. Created my main application code from addresses 0x8000 to 0x1FFFF
This code is working fine. 
Now my doubt is, I have ISRs placed in both bootloader as well as main application code and didn't use any ISR vector relocation. 
Is it necessary to relocate the vector tables in main application?

Answer: Yes - you have to relocate your vector table, 
otherwise the interrupts will fire handlers of the bootloader, which will almost certainly lead to a crash.

First you modify the linker script to "move the flash" a little bit higher (eg. 0x8000 in your case), 
this will also mean that the new vector table starts at 0x8000, 
unless you remove it all together and place it in RAM - but that is a slightly different topic (remember about the 256-byte alignment requirement for the NVIC in that case).

I usually use a piece of code like this to jump to the application:

#define APPLICATION_BASE 0x8000
__attribute__((noreturn)) static void start_application(void){

    SCB->VTOR = APPLICATION_BASE; //move interrupt vector base
    typedef void (*function_void_t)(void);
    #define avuint32(avar) (*((volatile uint32_t *) (avar)))

    function_void_t application;
    application = (function_void_t)(avuint32(APPLICATION_BASE+4));

    __DSB();
    application();
    __builtin_unreachable();
}
The "jump" is offset by 4 because the first word in the blob is the initial stack pointer, 
the second word is the reset vector of the application. 
This code will make the application use the stack of the bootloader, 
so you may have to tweak it a little (some bytes of the stack will be lost because they were used by the bootloader).

#################################################L A B###########################################################################

STM32CubeIDE
3 Perspectives are Availible
1. Device Configration Perspective
2. Code Perspective C/C++
3. Debug Perspective

MCU
STM32F407VG

LED's
PD12 Green
PD13 Orange
PD14 Red
PD15 Blue

Button
PA0(User) - Blue Button
Reset- Black Button

GPIO API's
HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
HAL_GPIO_TogglePin(Port, Pin);

void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin) //Output Data Register
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;  // GPIO port bit set/reset register
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}

static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

}

Class 02
Agenda: GPIO, Timer, Uart

GPIO
HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
HAL_GPIO_WritePin(GPIOD, LED1_Pin, GPIO_PIN_SET);

Assignment 1 

Q1. Write a Program(GPIO_A1) and Unsing Label Configure Pins PD13 , PD14 
to LED3, LED4 Respectively & Toggle the LED's connected to them , also configure Serial Wire Debug Feature?

Q2. Write a Program(GPIO_A2) and Configure Pins PD12 to LED1 & 
Set the LED's connected to the PIN for 500ms and Reset for 500ms , also configure SWD Feature?

Q3. Write a Program(GPIO_A3) and Configure Pins 
(Switch)PA0  to GPIO_Input ,
(LED)   PD12 to GPIO_Output,
Action:Toggle the LED's when Switch is Pressed , also configure SWD Feature?
 
 /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
		  {
		  	  HAL_Delay(100); //Debouncing Delay
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
		  		  {
		  		  	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);

		  		  }
		  }

Q4. Write a Interrupt Driven Program(GPIO_A4) and Configure Pins 
(Switch)PA0  to GPIO_EXTI0 ,
(LED)   PD12 to GPIO_Output,
System View->NVIC--> Enable EXTI line0 Interrupt
Action:Toggle the LED's when Switch is Pressed , also configure SWD Feature?

/* USER CODE BEGIN PV */
uint8_t flag=0;

/* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(1 == flag)
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		  flag=0;
	  }


/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	flag=1;
}

Flow
							ARM Specific		H/W Specific			  Actual Function to Code
Switch(EXTI0 Source)--> EXTIRq_Handler --> HAL_GPIO_EXTI_IRQHandler() --> HAL_GPIO_EXTI_Callback()
Actual Funcion where we can Code HAL_GPIO_EXTI_Callback() 

Assignment 2 Timer
Theory:

16MHZ is the Clock for APB Bus
Agenda is to genrate a delay for 1MS
Running this Delay for 1000 Times(Counting till 1000) for Getting 1Sec

PreScalar=16000
16MHZ/PreScalar = 1KHZ

Freq.= 1/Time
1KHZ = 1MS
1HZ = 1Sec


At a Freq. of 1KHZ if we count till 1000 we get 1Sec of Delay
			  1MS          *        1000     =  1Sec


Q5 Write a Interrupt Driven Program(TIM_INT_A5) and 
Configure Pins 
(LED)   PD12 to GPIO_Output

Configure NVIC
NVIC GUI --> TIMER2 GLOBAL INTERRUPT Enable

Configure Peripherals TIMER2 (TIM2)

**Tim2 Mode & Configration**
Clock Source: Internal Clock

**Parameter Settings**
PreScalar : 16000
Conter Mode: UP
Counter Period: 1000  //At a Freq. of 1KHZ if we count till 1000 we get 1Sec of Delay
Trigger Event Selection : Update Event // reloads the timer once its expired

Action:Toggle the LED's when Timer time Elapsed or Timer Expire , also configure SWD Feature?

/* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
  
/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
}

Q6 Write a Program(TIM_PWM_A6) to Learn Pulse Width Modulation and 
Configure Peripherals TIMER4 (TIM4)
Clock Source: Internal Clock
PreScalar : 16
Conter Mode: UP
Counter Period: 100
Channel 1: PWM Genration CH1
Channel 2: PWM Genration CH2
Channel 3: PWM Genration CH3
Channel 4: PWM Genration CH4

Action:Control the Brightness of LED , also configure SWD Feature?

Lets say LED Takes 100us to reach to its maximum Brightness
if we turn ON LED for 50us then its Brightness will be 50%
if we turn ON LED for 25us then its Brightness will be 25%

PreScalar=16
16MHZ/PreScalar = 1MHZ
1MHZ=0.001MS=1MicroSec

Duty Cycle= Ton/ Ton + Toff
				

/* USER CODE BEGIN 1 */
    int dutycycle=0;
	
 /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
  
/* USER CODE BEGIN WHILE */
  while (1)
  {
	  htim4.Instance->CCR1 = dutycycle; // Capture and Compare Register1
	  htim4.Instance->CCR2 = dutycycle; // Capture and Compare Register2
	  htim4.Instance->CCR3 = dutycycle; // Variation 1: Increasing Duty Cycle will make the fading Slow, decresing dutycycle will make fading faster
	  htim4.Instance->CCR4 = dutycycle;
	  dutycycle -=1;
	  if(dutycycle<1) 
	  dutycycle=99;
	  HAL_Delay(25); // for Proper Fading Affect
}

Q7 Write a Program(TIM_OC_A7) to Learn Timer Output Compare and 
Configure Peripherals TIMER4 (TIM4)
Clock Source: Internal Clock
PreScalar : 16000
Conter Mode: UP
Counter Period: 1000
Channel 1: OC CH1
Channel 2: OC CH2
Channel 3: OC CH3
Channel 4: OC CH4
CH1 Pulse 250, 
	Mode Toggle
CH2 Pulse 500, 
	Mode Toggle
CH3 Pulse 750, 
	Mode Toggle
CH4 Pulse 1000, 
	Mode Toggle

Action:Control the Motion Sequence , also configure SWD Feature?

 /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start(&htim4,TIM_CHANNEL_1);
  HAL_TIM_OC_Start(&htim4,TIM_CHANNEL_2);
  HAL_TIM_OC_Start(&htim4,TIM_CHANNEL_3);
  HAL_TIM_OC_Start(&htim4,TIM_CHANNEL_4);

Q8 Write a Program(TIM_IC_A8) to Learn Timer Input Capture Mode and 
Configure Peripherals TIMER2 (TIM2)
Clock Source: Internal Clock
PreScalar : 16000
Conter Mode: UP
Counter Period: 100000
Channel 1: Input Capture Direct Mode  //Connected to PA0
Input Filter : 15 // To Avoid Debouncing 

Configure NVIC
NVIC GUI --> TIMER2 GLOBAL INTERRUPT Enable

Software Requirement: STM Studio

Action: Capture the Timing of Button Pressed and Display the same in STM STudio, also configure SWD Feature?

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t counterVal;
uint32_t inputCaptureVal;

/* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
  
/* USER CODE BEGIN WHILE */
while (1)
{
  counterVal = __HAL_TIM_GetCounter(&htim2);
}

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM2)  //Confirming weather Interrupt Genrated from TIM2 as the ISR is common for All Timers
	{
		inputCaptureVal = __HAL_TIM_GetCounter(htim); // Get the Button Press Timing
	}
}

Freq:16MHZ
Aim: 100 Sec
Prescalar=16000
16MHZ/PreScalar = 1KHZ

1KHZ= 1MS

1MS * 1000 * 100 = 100Sec


Assignment 3 ADC
Theory:
Sucessive Approximation ADC
Total Conversion Time 

Totalcycles = Sampling + 12 Cycles

Calculation for Sampling Time
APB Clk= 16 MHz
ADC Prescalar = /8
ADC CLK = APB Clk/ Prescalar
ADC CLK = 16/8 =2Mhz
1MHz= 1Micro Second
2MHz= 0.5Micro Second

Default Cycles = 3Cycles
1Cycle = 0.5Micro Second
3Cycles = 1.5Micro Second 

480Cycles = 0.5 * 480 = 240 Micro Second
12 Cycles = 0.5 * 12  = 6 Micro Second

Tc = 480 + 12 =492 Cycles
Tt = 240 + 6  =246 micro second ~250 micro second =0.25 MS

Assuming 8Bit ADC
Max 255 Full Volt. 3.3v
Min 0   GND  Vold. 0.0V

Assuming 10Bit ADC
Max 1023 Full Volt. 3.3v
Min 0    GND  Vold. 0.0V

Assuming 12Bit ADC
Max 4095 Full Volt. 3.3v
Min 0    GND  Vold. 0.0V

Q9 Write a Program(ADC_SS_A9) to Learn ADC Single Shot Mode and 
Configure Peripherals ADC1 
MODE : IN0 (Connected to PA0 Switch)
PreScalar : PLCK2 / 8
Alignment : Right Align
Data Size/ Resolution : 8Bit
Continous Conversion : Disabled

Software Requirement: STM Studio

Action : Press the User Switch (PA0) to get Max Value of ADC in Single Shot 
and Display the same in STM STudio, also configure SWD Feature?

/* USER CODE BEGIN 0 */
uint32_t adcval=0;

/* USER CODE BEGIN 2 */
HAL_ADC_Start(&hadc1);

  
/* USER CODE BEGIN WHILE */
while (1)
{
  adcval= HAL_ADC_GetValue(&hadc1);
}

Q10 Write a Program(ADC_CC_A10) to Learn ADC Continous Conversion Mode and 
Configure Peripherals ADC1 
MODE : IN0 (Connected to PA0 Switch)
PreScalar : PLCK2 / 8
Alignment : Right Align
Data Size/ Resolution : 8Bit
Continous Conversion : Enabled
Rank->Sampling Time : 480 Cycles

Software Requirement: STM Studio

Action : Press the User Switch (PA0) to get Max Value of ADC in Continous Conversion Mode 
and Display the same in STM STudio, also configure SWD Feature?

/* USER CODE BEGIN 0 */
uint32_t adcval=0;

/* USER CODE BEGIN 2 */
HAL_ADC_Start(&hadc1);

  
/* USER CODE BEGIN WHILE */
while (1)
{
  adcval= HAL_ADC_GetValue(&hadc1);
}

Assignment 4 RTC

Q11 Write a Interrupt Driven Program(RTC_INT_A11) to Learn Real Time Clock and 
Configure Pins 							Alarm Time	HH:MM:SS    Current Time HH:MM:SS
(LED)   PD12 to GPIO_Output // Alarm Indication LED 00:00:00				 23:59:50
(LED)   PD13 to GPIO_Output // Second's LED
Configure NVIC
NVIC GUI --> RTC alarms A and B interrupt ENABLE

Configure Peripherals RTC 
Activate Clock Source : Check
Activate Calender : Check
Alarm A : Internal Alarm

Calender Time:-
Hours  	: 23
Minute	: 59
Second	: 50

Calender Date:-
Weekday	: Thursday
Month	: January
Date	: 21
Year	: 1

Alarm A:
Alarm Date : 22

/* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	  HAL_Delay(500);
  }

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
}


Assignment 5 Internal WatchDog
Q12 Write a Interrupt Driven Program(IWDG_A12) to Learn Internal WatchDog Timer and 
Configure Pins 
(LED) Green  	PD12 to GPIO_Output // Counter LED
(LED) Orange  	PD13 to GPIO_Output // Watchdog Refresh
(LED) Red  		PD14 to GPIO_Output // System Reset
(Switch)Blue Button	PA0  to GPIO_Input  // Watchdog Refresh Switch

Configure NVIC
NVIC GUI --> TIMER2 GLOBAL INTERRUPT Enable

Configure Peripherals TIMER2 (TIM2)
Clock Source: Internal Clock
PreScalar : 16000
Conter Mode: UP
Counter Period: 50
Trigger Event Selection : Update Event 

Configure Peripherals IWDG
Activated: Check
IWDG Counter Prescalar : 64

Calculations
Watch Dog Freq: 32Khz
Prescalar : 64
Effective Clock for WDG : 32Khz/ Prescalar = 32/64 =0.5 Khz = 2Ms * 4095 = 8190 ms ~ 8Sec

/* USER CODE BEGIN PV */
uint32_t counter=0;

/* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,SET); // For Showing System Reset
  HAL_Delay(2500);
  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,RESET);
  
/* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
	  	  {
	  		  HAL_IWDG_Refresh(&hiwdg);
	  		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13); //WatchDog Refresh LED
	  	  }
 }

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	// Just for Counting , to show something is running
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
	counter++;
}





Assignment 6 UART 

Q13 Write a Program(UART_Tx_A13) to Learn Internal UART Transmit Only and 

Configure Peripherals UART (UART4)
Default Configration
8 Data Bit
No Parity
1 Stop Bit
115200 Baud Rate

Also configure SWD Feature?

Connection Link: https://drive.google.com/file/d/17D1l-wdN1fok9MOISNcXiuAzuyNcZgJ9/view?usp=sharing
Driver for FTDI:https://www.ftdichip.com/Drivers/CDM/CDM212362_Setup.zip


/* USER CODE BEGIN Includes */
#include "string.h"

/* USER CODE BEGIN 2 */
char tx[30]= "Hello World\r\n";
/* USER CODE END 2 */

/* USER CODE BEGIN WHILE */
while (1)
{
	  HAL_UART_Transmit(&huart4, (uint8_t *)tx, strlen(tx), 10);
	  HAL_Delay(500);
    /* USER CODE END WHILE */
}

Q14 Write a Interrupt Driven Program(UART_Echo_A14) to Learn UART RX TX Functionality and 
Configure Pins 
(LED)   PD12 to GPIO_Output // Interrupt Confirmation LED

Configure NVIC
NVIC GUI --> UART4 GLOBAL INTERRUPT Enable

Configure Peripherals UART (UART4)
Default Configration
8 Data Bit
No Parity
1 Stop Bit
115200 Baud Rate

Also configure SWD Feature?

Interrupt
/* USER CODE BEGIN PV */
char rx;
char pre_text[12]="You have sent :";
char post_text[2]="\r\n";

/* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_UART_Receive_IT(&huart4, (uint8_t *)&rx, 1);
  }
  
/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	 HAL_UART_Transmit(&huart4, (uint8_t *)&pre_text, 11, 10);
	 HAL_UART_Transmit(&huart4, (uint8_t *)&rx, 1, 10);
	 HAL_UART_Transmit(&huart4, (uint8_t *)&post_text, 3, 10);
}

SPI
8 Bit Register
RW
7 6 5 4 3 2 1 0
1 0 0 0 0 0 0 0  Read ->(0x80) | CMD[Register Address/Address]
0 0 0 0 0 0 0 0  Write->(0x00) | CMD[Register Address/Address]

0x20 Control Register4
0x37 Value to be set in Control Register (for enabling XYZ Axis, Setting Feqn. 12.5Hz)

Eg.
TxBuf[0]=0x20;// Address of Register
TxBuf[1]=0x37;// Data to be filled

Reading Control Resgister
Read   Ctrl_Reg
0x80 | 0x20

0x23 Control Register3
0xC8 Value to be set in Control Register3 (1: data ready signal connected to INT1, 1: interrupt signals active HIGH, 1: INT1/DRDY signal enabled)

0x80 | 0x29 Read X Axis Data

0x80 | 0x2B Read Y Axis Data

0x80 | 0x2D Read Z Axis Data

Make 3 Global variables and observe value in STM Studio
Rx_X
Rx_Y
Rx_Z

Assignment I2C
/* USER CODE BEGIN PD */
#define mpu9265Address	0xD0
/* USER CODE END PD */

/* USER CODE BEGIN PV */
uint8_t i2cBuf[8];
int16_t ax,ay,az;
float Xaccel,Yaccel,Zaccel;
/* USER CODE END PV */


  /* USER CODE BEGIN 2 */

  //1. Scan the I2C addresses
  	for(uint8_t i=0; i<255; i++)
  	{
  		if(HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 10) == HAL_OK)
  		{
  			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
  			break;
  		}
  	}

	//2. I2C Write example
	//a) Set accelerometer range (reg28)
	i2cBuf[0] = 0x1C;			//Register address: Accelerometer config 1 [Pg 14 Register Map]
	i2cBuf[1] = 0x08;		//Data to write, +-8g range
	HAL_I2C_Master_Transmit(&hi2c1, mpu9265Address, i2cBuf, 2, 10);

	//3. I2C Read example
	//Request to read from a register (reg28)
	i2cBuf[0] = 0x1C;			//Register address 28 [0x1C]: Accelerometer config 1
	HAL_I2C_Master_Transmit(&hi2c1, mpu9265Address, i2cBuf, 1, 10);
	//Read data
	i2cBuf[1] = 0x00;
	HAL_I2C_Master_Receive(&hi2c1, mpu9265Address|0x01, &i2cBuf[1], 1, 10);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  	//4. Read accelerometer data
	  		//Request to read from a register
	  		i2cBuf[0] = 0x3B;			//Register address: X_axis H
	  		HAL_I2C_Master_Transmit(&hi2c1, mpu9265Address, i2cBuf, 1, 10);
	  		//Read data
	  		i2cBuf[1] = 0x00;
	  		HAL_I2C_Master_Receive(&hi2c1, mpu9265Address|0x01, &i2cBuf[1], 6, 10);

	  		ax = -(i2cBuf[1]<<8 | i2cBuf[2]);
	  		ay = -(i2cBuf[3]<<8 | i2cBuf[4]);
	  		az =  (i2cBuf[5]<<8 | i2cBuf[6]);

	  		Xaccel = ax/8192.0;
	  		Yaccel = ay/8192.0;
	  		Zaccel = az/8192.0;
	  		HAL_Delay(50);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}


How to put a breakpoint at Interrupt:
Add this in the interrupt code and put a breakpoint on it
asm("nop");